//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/KBMandController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KBMandController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KBMandController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KBMandController"",
    ""maps"": [
        {
            ""name"": ""ActivePlayer"",
            ""id"": ""e344afa6-c2c4-4131-a670-8e7df98dac46"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""223a7065-8f3b-4ea5-b0ea-ed09d9722802"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""65bfea7d-320f-41a2-9a69-b17bef38263a"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1edce362-abf0-4eeb-944d-d76c5dd90fcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldToGet"",
                    ""type"": ""Value"",
                    ""id"": ""1208abd1-2b87-4e20-9e08-0fea7551bd64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseHeal"",
                    ""type"": ""Value"",
                    ""id"": ""8863d1d2-a7ba-4163-bb8d-8203421c8497"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swap"",
                    ""type"": ""Value"",
                    ""id"": ""bcda6efb-9e1c-4017-87a6-e6cf17baf3ab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ping"",
                    ""type"": ""Button"",
                    ""id"": ""d54154b7-8aa9-449b-b4c9-8ce8432d222e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1171855c-4711-4cef-ace3-e4faedc24b99"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControllerPlayer"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb4fe1e3-d0ed-4415-b6a8-d3a64a812d81"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControllerPlayer"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e24edf-0331-46b4-84cf-d8879a670008"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControllerPlayer"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""708bb914-859c-429b-afa3-95fe360296c0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControllerPlayer"",
                    ""action"": ""HoldToGet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35811f0b-28ee-4e10-88d9-ee30ea45de0e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseHeal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""085f7e15-8d29-4657-8f8c-7a9c6c106a0e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b60275c3-4f0e-49f6-8c07-976c269e9a87"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControllerPlayer"",
                    ""action"": ""Ping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ManagerPlayer"",
            ""id"": ""37c2e037-d546-492b-bb0f-1d0dff6487dd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""83bd3c8e-9bf8-4ae9-afc2-eeb82c4eed99"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""87c2f43a-e4e3-4fb2-896d-58dc1170f903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle"",
                    ""type"": ""Button"",
                    ""id"": ""a84d88f8-9606-41b5-a91f-c3bc258f5930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""12dfa735-70ec-4077-a9e8-f453604ecb8e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4df315f-d800-44dd-ac5c-876c2f06dfa8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""662c4ad2-94c2-47e7-9ef9-ba94ff9e0677"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ecd153b9-df87-46a9-9764-234c0caf1698"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da328469-3455-45cb-afbc-d76ea6711748"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5bf77527-e5d6-431b-8fc9-d854b20034e9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""216b0c5d-18b6-4eb4-9b9c-0745142ad9ef"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBMPlayer"",
                    ""action"": ""Cycle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ControllerPlayer"",
            ""bindingGroup"": ""ControllerPlayer"",
            ""devices"": []
        },
        {
            ""name"": ""KBMPlayer"",
            ""bindingGroup"": ""KBMPlayer"",
            ""devices"": []
        }
    ]
}");
        // ActivePlayer
        m_ActivePlayer = asset.FindActionMap("ActivePlayer", throwIfNotFound: true);
        m_ActivePlayer_Move = m_ActivePlayer.FindAction("Move", throwIfNotFound: true);
        m_ActivePlayer_Aim = m_ActivePlayer.FindAction("Aim", throwIfNotFound: true);
        m_ActivePlayer_Attack = m_ActivePlayer.FindAction("Attack", throwIfNotFound: true);
        m_ActivePlayer_HoldToGet = m_ActivePlayer.FindAction("HoldToGet", throwIfNotFound: true);
        m_ActivePlayer_UseHeal = m_ActivePlayer.FindAction("UseHeal", throwIfNotFound: true);
        m_ActivePlayer_Swap = m_ActivePlayer.FindAction("Swap", throwIfNotFound: true);
        m_ActivePlayer_Ping = m_ActivePlayer.FindAction("Ping", throwIfNotFound: true);
        // ManagerPlayer
        m_ManagerPlayer = asset.FindActionMap("ManagerPlayer", throwIfNotFound: true);
        m_ManagerPlayer_Move = m_ManagerPlayer.FindAction("Move", throwIfNotFound: true);
        m_ManagerPlayer_Interact = m_ManagerPlayer.FindAction("Interact", throwIfNotFound: true);
        m_ManagerPlayer_Cycle = m_ManagerPlayer.FindAction("Cycle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActivePlayer
    private readonly InputActionMap m_ActivePlayer;
    private List<IActivePlayerActions> m_ActivePlayerActionsCallbackInterfaces = new List<IActivePlayerActions>();
    private readonly InputAction m_ActivePlayer_Move;
    private readonly InputAction m_ActivePlayer_Aim;
    private readonly InputAction m_ActivePlayer_Attack;
    private readonly InputAction m_ActivePlayer_HoldToGet;
    private readonly InputAction m_ActivePlayer_UseHeal;
    private readonly InputAction m_ActivePlayer_Swap;
    private readonly InputAction m_ActivePlayer_Ping;
    public struct ActivePlayerActions
    {
        private @KBMandController m_Wrapper;
        public ActivePlayerActions(@KBMandController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ActivePlayer_Move;
        public InputAction @Aim => m_Wrapper.m_ActivePlayer_Aim;
        public InputAction @Attack => m_Wrapper.m_ActivePlayer_Attack;
        public InputAction @HoldToGet => m_Wrapper.m_ActivePlayer_HoldToGet;
        public InputAction @UseHeal => m_Wrapper.m_ActivePlayer_UseHeal;
        public InputAction @Swap => m_Wrapper.m_ActivePlayer_Swap;
        public InputAction @Ping => m_Wrapper.m_ActivePlayer_Ping;
        public InputActionMap Get() { return m_Wrapper.m_ActivePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActivePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IActivePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_ActivePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActivePlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @HoldToGet.started += instance.OnHoldToGet;
            @HoldToGet.performed += instance.OnHoldToGet;
            @HoldToGet.canceled += instance.OnHoldToGet;
            @UseHeal.started += instance.OnUseHeal;
            @UseHeal.performed += instance.OnUseHeal;
            @UseHeal.canceled += instance.OnUseHeal;
            @Swap.started += instance.OnSwap;
            @Swap.performed += instance.OnSwap;
            @Swap.canceled += instance.OnSwap;
            @Ping.started += instance.OnPing;
            @Ping.performed += instance.OnPing;
            @Ping.canceled += instance.OnPing;
        }

        private void UnregisterCallbacks(IActivePlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @HoldToGet.started -= instance.OnHoldToGet;
            @HoldToGet.performed -= instance.OnHoldToGet;
            @HoldToGet.canceled -= instance.OnHoldToGet;
            @UseHeal.started -= instance.OnUseHeal;
            @UseHeal.performed -= instance.OnUseHeal;
            @UseHeal.canceled -= instance.OnUseHeal;
            @Swap.started -= instance.OnSwap;
            @Swap.performed -= instance.OnSwap;
            @Swap.canceled -= instance.OnSwap;
            @Ping.started -= instance.OnPing;
            @Ping.performed -= instance.OnPing;
            @Ping.canceled -= instance.OnPing;
        }

        public void RemoveCallbacks(IActivePlayerActions instance)
        {
            if (m_Wrapper.m_ActivePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActivePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_ActivePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActivePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActivePlayerActions @ActivePlayer => new ActivePlayerActions(this);

    // ManagerPlayer
    private readonly InputActionMap m_ManagerPlayer;
    private List<IManagerPlayerActions> m_ManagerPlayerActionsCallbackInterfaces = new List<IManagerPlayerActions>();
    private readonly InputAction m_ManagerPlayer_Move;
    private readonly InputAction m_ManagerPlayer_Interact;
    private readonly InputAction m_ManagerPlayer_Cycle;
    public struct ManagerPlayerActions
    {
        private @KBMandController m_Wrapper;
        public ManagerPlayerActions(@KBMandController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ManagerPlayer_Move;
        public InputAction @Interact => m_Wrapper.m_ManagerPlayer_Interact;
        public InputAction @Cycle => m_Wrapper.m_ManagerPlayer_Cycle;
        public InputActionMap Get() { return m_Wrapper.m_ManagerPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManagerPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IManagerPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_ManagerPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ManagerPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Cycle.started += instance.OnCycle;
            @Cycle.performed += instance.OnCycle;
            @Cycle.canceled += instance.OnCycle;
        }

        private void UnregisterCallbacks(IManagerPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Cycle.started -= instance.OnCycle;
            @Cycle.performed -= instance.OnCycle;
            @Cycle.canceled -= instance.OnCycle;
        }

        public void RemoveCallbacks(IManagerPlayerActions instance)
        {
            if (m_Wrapper.m_ManagerPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IManagerPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_ManagerPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ManagerPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ManagerPlayerActions @ManagerPlayer => new ManagerPlayerActions(this);
    private int m_ControllerPlayerSchemeIndex = -1;
    public InputControlScheme ControllerPlayerScheme
    {
        get
        {
            if (m_ControllerPlayerSchemeIndex == -1) m_ControllerPlayerSchemeIndex = asset.FindControlSchemeIndex("ControllerPlayer");
            return asset.controlSchemes[m_ControllerPlayerSchemeIndex];
        }
    }
    private int m_KBMPlayerSchemeIndex = -1;
    public InputControlScheme KBMPlayerScheme
    {
        get
        {
            if (m_KBMPlayerSchemeIndex == -1) m_KBMPlayerSchemeIndex = asset.FindControlSchemeIndex("KBMPlayer");
            return asset.controlSchemes[m_KBMPlayerSchemeIndex];
        }
    }
    public interface IActivePlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnHoldToGet(InputAction.CallbackContext context);
        void OnUseHeal(InputAction.CallbackContext context);
        void OnSwap(InputAction.CallbackContext context);
        void OnPing(InputAction.CallbackContext context);
    }
    public interface IManagerPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCycle(InputAction.CallbackContext context);
    }
}
